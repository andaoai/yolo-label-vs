{
  "name": "yolo-labeling-vs",
  "displayName": "YOLO Labeling",
  "description": "A VS Code extension for YOLO dataset labeling",
  "version": "0.0.60",
  "publisher": "andaoai",
  "license": "MIT",
  "icon": "docs/images/icon.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/andaoai/yolo-label-vs"
  },
  "keywords": [
    "yolo",
    "labeling",
    "dataset",
    "computer vision",
    "machine learning",
    "annotation",
    "object detection",
    "image annotation",
    "bounding box",
    "deep learning",
    "ai",
    "yaml",
    "keybindings",
    "darknet",
    "neural network",
    "yolov5",
    "yolov8",
    "ultralytics",
    "attention mechanism",
    "transformer",
    "computer vision",
    "pytorch",
    "tensorflow",
    "cv",
    "data labeling",
    "detection",
    "segmentation",
    "coco",
    "instance segmentation",
    "real-time"
  ],
  "engines": {
    "vscode": "^1.85.0"
  },
  "categories": [
    "Other",
    "Data Science",
    "Machine Learning",
    "Visualization"
  ],
  "activationEvents": [
    "onStartupFinished",
    "workspaceContains:**/*.yaml",
    "workspaceContains:**/*.yml"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "yolo-labeling-vs.openLabelingPanel",
        "title": "Open YOLO Labeling Panel"
      },
      {
        "command": "yolo-labeling-vs.openLabelingPanelKeyboard",
        "title": "Open YOLO Labeling Panel (Keyboard Shortcut)"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "when": "resourceExtname == .yaml || resourceExtname == .yml",
          "command": "yolo-labeling-vs.openLabelingPanel",
          "group": "navigation@1"
        }
      ],
      "editor/context": [
        {
          "when": "resourceExtname == .yaml || resourceExtname == .yml",
          "command": "yolo-labeling-vs.openLabelingPanel",
          "group": "navigation@1"
        }
      ],
      "editor/title/context": [
        {
          "when": "resourceExtname == .yaml || resourceExtname == .yml",
          "command": "yolo-labeling-vs.openLabelingPanel",
          "group": "navigation@1"
        }
      ]
    },
    "keybindings": [
      {
        "command": "yolo-labeling-vs.openLabelingPanel",
        "key": "ctrl+y",
        "when": "editorTextFocus && resourceExtname == .yaml || resourceExtname == .yml"
      },
      {
        "command": "yolo-labeling-vs.openLabelingPanelKeyboard",
        "key": "ctrl+y",
        "when": "!editorTextFocus || !(resourceExtname == .yaml || resourceExtname == .yml)"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./ && npm run copy-templates",
    "watch": "tsc -watch -p ./ & npm run watch-templates",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test",
    "copy-templates": "node -e \"const fs=require('fs'); const path=require('path'); const srcDir='src/templates'; const destDir='out/templates'; if(!fs.existsSync(destDir)) fs.mkdirSync(destDir, {recursive: true}); const copyDir=(src,dest)=>{if(!fs.existsSync(dest)) fs.mkdirSync(dest, {recursive: true}); const entries=fs.readdirSync(src, {withFileTypes: true}); for(const entry of entries){const srcPath=path.join(src, entry.name); const destPath=path.join(dest, entry.name); if(entry.isDirectory()) copyDir(srcPath, destPath); else fs.copyFileSync(srcPath, destPath);}}; copyDir(srcDir, destDir);\"",
    "watch-templates": "node -e \"const fs=require('fs'); const path=require('path'); const chokidar=require('chokidar'); const srcDir='src/templates'; const destDir='out/templates'; if(!fs.existsSync(destDir)) fs.mkdirSync(destDir, {recursive: true}); const watcher=chokidar.watch(srcDir); watcher.on('all', (event, filepath) => {if(fs.existsSync(filepath) && !fs.lstatSync(filepath).isDirectory()) {const relativePath=path.relative(srcDir, filepath); const destPath=path.join(destDir, relativePath); fs.mkdirSync(path.dirname(destPath), {recursive: true}); fs.copyFileSync(filepath, destPath); console.log(`Copied: ${filepath} -> ${destPath}`)}});\""
  },
  "devDependencies": {
    "@types/js-yaml": "^4.0.9",
    "@types/mocha": "^10.0.10",
    "@types/node": "^20.17.32",
    "@types/vscode": "^1.85.0",
    "@typescript-eslint/eslint-plugin": "^8.28.0",
    "@typescript-eslint/parser": "^8.28.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "chokidar": "^3.5.3",
    "eslint": "^9.23.0",
    "mocha": "^11.2.2",
    "onnxruntime-node": "^1.21.1",
    "svg2png-cli": "^1.1.1",
    "svgexport": "^0.4.2",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.2"
  },
  "dependencies": {
    "@mui/icons-material": "^7.0.2",
    "@mui/material": "^7.0.2",
    "@tensorflow/tfjs": "^4.22.0",
    "@tensorflow/tfjs-converter": "^4.22.0",
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "jimp": "^0.22.10",
    "js-yaml": "^4.1.0",
    "npyjs": "^0.7.0",
    "onnxjs": "^0.1.8",
    "onnxruntime-web": "^1.21.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-segment-anything": "^1.0.4"
  }
}
